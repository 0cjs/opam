(jbuild_version 1)

(library
  ((name opam_client)
   (public_name opam-client)
   (synopsis "OCaml Package Manager client and CLI library")
   (modules (:standard \ opamMain get-git-version run-number))
   (libraries (opam-state opam-solver re cmdliner))
   (flags (:standard
           (:include ../ocaml-flags-standard.sexp)
           (:include ../ocaml-context-flags.sexp)))
   (wrapped false)))

(executable
  ((name opamMain)
   (public_name opam)
   (package opam)
   (modules opamMain)
   (flags (:standard
           (:include ../ocaml-flags-standard.sexp)
           (:include ../ocaml-context-flags.sexp)
           (:include linking.sexp)))
   (libraries (opam-client))))

(rule
  (with-stdout-to .head-check (echo 0)))

(rule
  ((targets (git-sha))
   (deps    (.head-check run-number.ml))
   (action  (progn (run ocaml run-number.ml) (ignore-stderr (with-stdout-to ${@} (system "git rev-parse --quiet --verify HEAD || echo .")))))))

(rule
  (with-stdout-to get-git-version.ml (echo "print_string @@ let v = \"${read-lines:git-sha}\" in if v = \".\" then \"let version = None\" else \"let version = Some \\\"\" ^ v ^ \"\\\"\"")))

(rule
  (with-stdout-to run-number.ml (echo "Printf.fprintf (open_out \".head-check\") \"%d\" (match open_in \".head-check\" with c -> let r = try input_line c |> int_of_string |> succ with _ -> 0 in close_in c; r | exception _ -> 0)")))

(rule
  (with-stdout-to opamGitVersion.ml (run ocaml ${path:get-git-version.ml})))

(rule
  (with-stdout-to linking.sexp (run echo "()")))
